generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_PRD")
}

enum UserRoles {
  SUPER_ADMIN
  ADMIN
  USER
  MODERATOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id                                  String              @id @default(uuid())
  first_name                          String
  last_name                           String
  username                            String              @unique
  email                               String              @unique
  password                            String
  gender                              Gender
  role                                UserRoles           @default(USER)
  status                              UserStatus          @default(ACTIVE)
  phone_number                        String?
  profile_picture                     String?
  profile_picture_public_id           String?
  personal_identity_picture           String?
  personal_identity_picture_public_id String?
  birth_date                          DateTime?           @db.Date
  address                             String?
  city_id                             String?
  country_id                          String?
  created_at                          DateTime            @default(now())
  updated_at                          DateTime?           @default(now()) @updatedAt
  deleted_at                          DateTime?
  user_subscriptions                  userSubscriptions[] @relation("UserSubscriptions")
  items                               Item[]              @relation()
  city                                City?               @relation(fields: [city_id], references: [id])
  country                             Country?            @relation(fields: [country_id], references: [id])

  @@index([first_name, last_name, username, email])
  @@map("users")
}

model Category {
  id              String     @id @default(uuid())
  name_ar         String
  name_en         String
  description_en  String
  description_ar  String
  icon            String?
  image_url       String?
  image_public_id String?
  parent_id       String?
  parent          Category?  @relation("CategoryParent", fields: [parent_id], references: [id])
  created_at      DateTime   @default(now())
  updated_at      DateTime?  @default(now()) @updatedAt
  deleted_at      DateTime?
  children        Category[] @relation("CategoryParent")
  items           Item[]     @relation("CategoryItems")

  @@map("categories")
}

enum ItemCondition {
  NEW
  LIKE_NEW
  GOOD
  FAIR
  DAMAGED
  NOT_WORKING
}

model Item {
  id          String        @id @default(uuid())
  title       String
  description String
  trade_value Decimal       @default(0) @db.Decimal(10, 2)
  condition   ItemCondition
  city_id     String
  country_id  String
  user_id     String
  is_banner   Boolean       @default(false)
  item_images ItemImage[]
  banners     Banner[]
  category_id String
  category    Category?     @relation("CategoryItems", fields: [category_id], references: [id])
  country     Country?      @relation(fields: [country_id], references: [id])
  city        City?         @relation(fields: [city_id], references: [id])
  user        User?         @relation(fields: [user_id], references: [id])
  created_at  DateTime      @default(now())
  updated_at  DateTime?     @default(now()) @updatedAt
  deleted_at  DateTime?

  @@index([title])
  @@map("items")
}

model ItemImage {
  id              String    @id @default(uuid())
  image_url       String
  image_public_id String?
  item_id         String
  item            Item      @relation(fields: [item_id], references: [id])
  created_at      DateTime  @default(now())
  updated_at      DateTime? @default(now()) @updatedAt
  deleted_at      DateTime?

  @@map("item_images")
}

model Banner {
  id         String    @id @default(uuid())
  item_id    String
  item       Item      @relation(fields: [item_id], references: [id])
  is_active  Boolean   @default(true)
  start_date DateTime? @db.Date
  end_date   DateTime? @db.Date
  created_at DateTime  @default(now())
  updated_at DateTime? @default(now()) @updatedAt
  deleted_at DateTime?

  @@map("banners")
}

enum SubscriptionsStatus {
  ACTIVE
  INACTIVE
  PAUSED
  EXPIRED
}

enum SubscriptionsCategories {
  REGULAR
  SPONSORED
}

model Subscription {
  id                   String                  @id @default(uuid())
  title_ar             String
  title_en             String
  description_ar       String
  description_en       String
  price                Decimal                 @default(0) @db.Decimal(10, 2)
  offer_price          Decimal                 @default(0) @db.Decimal(10, 2)
  category             SubscriptionsCategories
  status               SubscriptionsStatus
  created_at           DateTime                @default(now())
  updated_at           DateTime?               @default(now()) @updatedAt
  deleted_at           DateTime?
  subscription_options SubscriptionsOptions[]

  @@map("subscriptions")
}

model SubscriptionsOptions {
  id               String       @id @default(uuid())
  name_ar          String
  name_en          String
  subscriptions_id String
  subscription     Subscription @relation(fields: [subscriptions_id], references: [id])
  created_at       DateTime     @default(now())
  updated_at       DateTime?    @default(now()) @updatedAt
  deleted_at       DateTime?

  @@map("subscription_options")
}

model userSubscriptions {
  id               String    @id @default(uuid())
  user_id          String
  user             User      @relation("UserSubscriptions", fields: [user_id], references: [id])
  payment_details  Json
  subscriptions_id Int
  created_at       DateTime  @default(now())
  updated_at       DateTime?
  deleted_at       DateTime?

  @@map("user_subscriptions")
}

model Country {
  id         String    @id @default(uuid())
  name_ar    String
  name_en    String
  created_at DateTime  @default(now())
  updated_at DateTime? @default(now()) @updatedAt
  deleted_at DateTime?
  cities     City[]
  users      User[]
  items      Item[]

  @@map("countries")
}

model City {
  id         String    @id @default(uuid())
  name_ar    String
  name_en    String
  country_id String
  country    Country   @relation(fields: [country_id], references: [id])
  created_at DateTime  @default(now())
  updated_at DateTime? @default(now()) @updatedAt
  deleted_at DateTime?

  users User[]
  items Item[]

  @@map("cities")
}
